{"ast":null,"code":"var _jsxFileName = \"/Users/edisipka/Desktop/Remote_conference_bingo/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport Square from './Square';\nimport Header from './Header';\nimport Popup from './Popup';\nimport LottieAnimation from './LottieAnimation';\nimport Animation from './Animation';\nimport { useReward } from 'react-rewards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    cards,\n    combination\n  } = _ref;\n  const [square, setSquare] = useState({});\n  const [chosenSquares, setChosenSquare] = useState([12]);\n  const [completedSquares, setCompletedSquares] = useState([]);\n  const [winningCombination, setWinningCombination] = useState(combination);\n  const [scoreBingo, setScoreBingo] = useState(0);\n  const [showAnimation, setShowAnimation] = useState(false);\n  const {\n    reward,\n    isAnimating\n  } = useReward('rewardId', 'confetti');\n\n  //useEffect to check win, if the length is below 4 there is no win, and if there is winning combination animation will show and it will update completedSquares and winningCombination.\n  useEffect(() => {\n    const checkWin = chosenSquares => {\n      if (chosenSquares.length <= 4) return false;\n      const newWinningCombinations = [...winningCombination];\n      for (let i = 0; i < newWinningCombinations.length; i++) {\n        const winPossibility = newWinningCombinations[i];\n        let matchCount = 0;\n        for (let j = 0; j < chosenSquares.length; j++) {\n          if (winPossibility.includes(chosenSquares[j])) {\n            matchCount++;\n          }\n        }\n        if (matchCount > 4) {\n          const addToCompletedSquares = completedSquares.concat(winPossibility);\n          setCompletedSquares(addToCompletedSquares);\n          setScoreBingo(prevCount => prevCount + 1);\n          newWinningCombinations.splice(i, 1);\n          setWinningCombination(newWinningCombinations);\n          setShowAnimation(true);\n          setTimeout(() => {\n            setShowAnimation(false);\n          }, 5500);\n          return true;\n        }\n      }\n      return false;\n    };\n    checkWin(chosenSquares);\n  }, [chosenSquares, completedSquares, winningCombination]);\n\n  // Called when a user selects a square on the game board.\n  const selectCard = id => {\n    if (chosenSquares.includes(Number(id))) return null;\n    setChosenSquare([...chosenSquares, Number(id)]);\n  };\n\n  // Randomly set cards from data\n  useEffect(() => {\n    selectCard(12);\n    const shuffledCards = shuffle(cards);\n    const selectedCards = shuffledCards.slice(0, 25);\n    const data = selectedCards.reduce((data, value, index) => ({\n      ...data,\n      [index]: value\n    }), {});\n    setSquare(data);\n  }, []);\n\n  // If all squares are checked display Popup component\n  if (chosenSquares.length > 24) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        selectedSquares: chosenSquares\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [showAnimation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Animation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lottie\",\n        children: /*#__PURE__*/_jsxDEV(LottieAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      scoreBingo: scoreBingo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"board\",\n      children: Object.keys(square).map(key => /*#__PURE__*/_jsxDEV(Square, {\n        id: key,\n        description: square[key],\n        squareChecked: chosenSquares,\n        checked: e => {\n          e.preventDefault();\n          selectCard(key);\n        },\n        completedSquares: completedSquares\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"pCao7ojpI38zMvAs8sjM5f/Y0Zk=\", false, function () {\n  return [useReward];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","shuffle","Square","Header","Popup","LottieAnimation","Animation","useReward","jsxDEV","_jsxDEV","Board","_ref","_s","cards","combination","square","setSquare","chosenSquares","setChosenSquare","completedSquares","setCompletedSquares","winningCombination","setWinningCombination","scoreBingo","setScoreBingo","showAnimation","setShowAnimation","reward","isAnimating","checkWin","length","newWinningCombinations","i","winPossibility","matchCount","j","includes","addToCompletedSquares","concat","prevCount","splice","setTimeout","selectCard","id","Number","shuffledCards","selectedCards","slice","data","reduce","value","index","children","selectedSquares","fileName","_jsxFileName","lineNumber","columnNumber","className","Object","keys","map","key","description","squareChecked","checked","e","preventDefault","_c","$RefreshReg$"],"sources":["/Users/edisipka/Desktop/Remote_conference_bingo/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport Square from './Square';\nimport Header from './Header';\nimport Popup from './Popup';\nimport LottieAnimation from './LottieAnimation'\nimport Animation from './Animation';\nimport { useReward } from 'react-rewards';\n\nconst Board = ({ cards, combination }) => {\n  const [square, setSquare] = useState({});\n  const [chosenSquares, setChosenSquare] = useState([12]);\n  const [completedSquares, setCompletedSquares] = useState([]);\n  const [winningCombination, setWinningCombination] = useState(combination);\n  const [scoreBingo, setScoreBingo] = useState(0);\n  const [showAnimation, setShowAnimation] = useState(false);\n  const { reward, isAnimating } = useReward('rewardId', 'confetti');\n\n\n\n  //useEffect to check win, if the length is below 4 there is no win, and if there is winning combination animation will show and it will update completedSquares and winningCombination.\n  useEffect(() => {\n    const checkWin = (chosenSquares) => {\n      if (chosenSquares.length <= 4) return false;\n      const newWinningCombinations = [...winningCombination];\n      for (let i = 0; i < newWinningCombinations.length; i++) {\n        const winPossibility = newWinningCombinations[i];\n        let matchCount = 0;\n        for (let j = 0; j < chosenSquares.length; j++) {\n          if (winPossibility.includes(chosenSquares[j])) {\n            matchCount++;\n          }\n        }\n        if (matchCount > 4) {\n          const addToCompletedSquares = completedSquares.concat(winPossibility);\n          setCompletedSquares(addToCompletedSquares);\n          setScoreBingo((prevCount) => prevCount + 1);\n          newWinningCombinations.splice(i, 1);\n          setWinningCombination(newWinningCombinations);\n          setShowAnimation(true);\n          setTimeout(() => {\n            setShowAnimation(false);\n          }, 5500);\n          return true;\n        }\n      }\n      return false;\n    };\n    checkWin(chosenSquares);\n  }, [chosenSquares, completedSquares, winningCombination]);\n\n// Called when a user selects a square on the game board.\n  const selectCard = (id) => {\n    if (chosenSquares.includes(Number(id))) return null;\n    setChosenSquare([...chosenSquares, Number(id)]);\n  };\n\n// Randomly set cards from data\n  useEffect(() => {\n    selectCard(12);\n    const shuffledCards = shuffle(cards);\n    const selectedCards = shuffledCards.slice(0, 25);\n    const data = selectedCards.reduce(\n      (data, value, index) => ({ ...data, [index]: value }),\n      {}\n    );\n    setSquare(data);\n  }, []);\n\n// If all squares are checked display Popup component\n  if (chosenSquares.length > 24) {\n    return (\n      <div>\n        <Popup selectedSquares={chosenSquares} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"main-container\">\n        {showAnimation && \n        <div>\n        <Animation />\n          <div className=\"lottie\">\n        <LottieAnimation/>\n    </div>\n    </div>\n      }\n    <Header scoreBingo={scoreBingo} />\n      <main className=\"board\">\n        {Object.keys(square).map((key) => (\n          <Square\n            key={key}\n            id={key}\n            description={square[key]}\n            squareChecked={chosenSquares}\n            checked={(e) => {\n              e.preventDefault();\n              selectCard(key);\n            }}\n            completedSquares={completedSquares}\n          />\n        ))}\n      </main>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}