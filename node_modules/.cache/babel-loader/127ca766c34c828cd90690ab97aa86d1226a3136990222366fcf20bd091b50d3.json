{"ast":null,"code":"import _defineProperty from\"/Users/edisipka/Desktop/Remote_conference_bingo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/edisipka/Desktop/Remote_conference_bingo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/edisipka/Desktop/Remote_conference_bingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/edisipka/Desktop/Remote_conference_bingo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import shuffle from'shuffle-array';import Square from'./Square';import Header from'./Header';import Popup from'./Popup';import LottieAnimation from'./LottieAnimation';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Board=function Board(_ref){var cards=_ref.cards,combination=_ref.combination;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),square=_useState2[0],setSquare=_useState2[1];var _useState3=useState([12]),_useState4=_slicedToArray(_useState3,2),chosenSquares=_useState4[0],setChosenSquare=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),completedSquares=_useState6[0],setCompletedSquares=_useState6[1];var _useState7=useState(combination),_useState8=_slicedToArray(_useState7,2),winningCombination=_useState8[0],setWinningCombination=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),scoreBingo=_useState10[0],setScoreBingo=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),showAnimation=_useState12[0],setShowAnimation=_useState12[1];//useEffect to check win, if the length is below 4 there is no win, and if there is winning combination animation will show and it will update completedSquares and winningCombination.\nuseEffect(function(){var checkWin=function checkWin(chosenSquares){if(chosenSquares.length<=4)return false;var newWinningCombinations=_toConsumableArray(winningCombination);for(var i=0;i<newWinningCombinations.length;i++){var winPossibility=newWinningCombinations[i];var matchCount=0;for(var j=0;j<chosenSquares.length;j++){if(winPossibility.includes(chosenSquares[j])){matchCount++;}}if(matchCount>4){var addToCompletedSquares=completedSquares.concat(winPossibility);setCompletedSquares(addToCompletedSquares);setScoreBingo(function(prevCount){return prevCount+1;});newWinningCombinations.splice(i,1);setWinningCombination(newWinningCombinations);setShowAnimation(true);setTimeout(function(){setShowAnimation(false);},3500);return true;}}return false;};checkWin(chosenSquares);},[chosenSquares,completedSquares,winningCombination]);// Called when a user selects a square on the game board.\nvar selectCard=function selectCard(id){if(chosenSquares.includes(Number(id)))return null;setChosenSquare([].concat(_toConsumableArray(chosenSquares),[Number(id)]));};// Randomly set cards from data\nuseEffect(function(){selectCard(12);var shuffledCards=shuffle(cards);var selectedCards=shuffledCards.slice(0,25);var data=selectedCards.reduce(function(data,value,index){return _objectSpread(_objectSpread({},data),{},_defineProperty({},index,value));},{});setSquare(data);},[]);// If all squares are checked display Popup component\nif(chosenSquares.length>24){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Popup,{selectedSquares:chosenSquares})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"main-container\",children:[showAnimation&&/*#__PURE__*/_jsx(\"div\",{className:\"lottie\",children:/*#__PURE__*/_jsx(LottieAnimation,{})}),/*#__PURE__*/_jsx(Header,{scoreBingo:scoreBingo}),/*#__PURE__*/_jsx(\"main\",{className:\"board\",children:Object.keys(square).map(function(key){return/*#__PURE__*/_jsx(Square,{id:key,description:square[key],squareChecked:chosenSquares,checked:function checked(e){e.preventDefault();selectCard(key);},completedSquares:completedSquares},key);})})]});};export default Board;","map":{"version":3,"names":["React","useState","useEffect","shuffle","Square","Header","Popup","LottieAnimation","jsx","_jsx","jsxs","_jsxs","Board","_ref","cards","combination","_useState","_useState2","_slicedToArray","square","setSquare","_useState3","_useState4","chosenSquares","setChosenSquare","_useState5","_useState6","completedSquares","setCompletedSquares","_useState7","_useState8","winningCombination","setWinningCombination","_useState9","_useState10","scoreBingo","setScoreBingo","_useState11","_useState12","showAnimation","setShowAnimation","checkWin","length","newWinningCombinations","_toConsumableArray","i","winPossibility","matchCount","j","includes","addToCompletedSquares","concat","prevCount","splice","setTimeout","selectCard","id","Number","shuffledCards","selectedCards","slice","data","reduce","value","index","_objectSpread","_defineProperty","children","selectedSquares","className","Object","keys","map","key","description","squareChecked","checked","e","preventDefault"],"sources":["/Users/edisipka/Desktop/Remote_conference_bingo/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport Square from './Square';\nimport Header from './Header';\nimport Popup from './Popup';\nimport LottieAnimation from './LottieAnimation'\n\nconst Board = ({ cards, combination }) => {\n  const [square, setSquare] = useState({});\n  const [chosenSquares, setChosenSquare] = useState([12]);\n  const [completedSquares, setCompletedSquares] = useState([]);\n  const [winningCombination, setWinningCombination] = useState(combination);\n  const [scoreBingo, setScoreBingo] = useState(0);\n  const [showAnimation, setShowAnimation] = useState(false);\n\n  //useEffect to check win, if the length is below 4 there is no win, and if there is winning combination animation will show and it will update completedSquares and winningCombination.\n  useEffect(() => {\n    const checkWin = (chosenSquares) => {\n      if (chosenSquares.length <= 4) return false;\n      const newWinningCombinations = [...winningCombination];\n      for (let i = 0; i < newWinningCombinations.length; i++) {\n        const winPossibility = newWinningCombinations[i];\n        let matchCount = 0;\n        for (let j = 0; j < chosenSquares.length; j++) {\n          if (winPossibility.includes(chosenSquares[j])) {\n            matchCount++;\n          }\n        }\n        if (matchCount > 4) {\n          const addToCompletedSquares = completedSquares.concat(winPossibility);\n          setCompletedSquares(addToCompletedSquares);\n          setScoreBingo((prevCount) => prevCount + 1);\n          newWinningCombinations.splice(i, 1);\n          setWinningCombination(newWinningCombinations);\n          setShowAnimation(true);\n          setTimeout(() => {\n            setShowAnimation(false);\n          }, 3500);\n          return true;\n        }\n      }\n      return false;\n    };\n    checkWin(chosenSquares);\n  }, [chosenSquares, completedSquares, winningCombination]);\n\n// Called when a user selects a square on the game board.\n  const selectCard = (id) => {\n    if (chosenSquares.includes(Number(id))) return null;\n    setChosenSquare([...chosenSquares, Number(id)]);\n  };\n\n// Randomly set cards from data\n  useEffect(() => {\n    selectCard(12);\n    const shuffledCards = shuffle(cards);\n    const selectedCards = shuffledCards.slice(0, 25);\n    const data = selectedCards.reduce(\n      (data, value, index) => ({ ...data, [index]: value }),\n      {}\n    );\n    setSquare(data);\n  }, []);\n\n// If all squares are checked display Popup component\n  if (chosenSquares.length > 24) {\n    return (\n      <div>\n        <Popup selectedSquares={chosenSquares} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"main-container\">\n        {showAnimation && \n          <div className=\"lottie\">\n        <LottieAnimation/>\n    </div>\n      }\n    <Header scoreBingo={scoreBingo} />\n      <main className=\"board\">\n        {Object.keys(square).map((key) => (\n          <Square\n            key={key}\n            id={key}\n            description={square[key]}\n            squareChecked={chosenSquares}\n            checked={(e) => {\n              e.preventDefault();\n              selectCard(key);\n            }}\n            completedSquares={completedSquares}\n          />\n        ))}\n      </main>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}